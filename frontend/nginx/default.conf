# フロントエンドアプリケーション用のサーバー設定
server {
    # HTTPポート80でリッスン
    listen 80;
    
    # サーバー名（本番環境では実際のドメイン名を設定）
    server_name localhost;
    
    # ドキュメントルート（Reactアプリのビルド結果が配置される場所）
    root /usr/share/nginx/html;
    
    # デフォルトインデックスファイル
    index index.html;
    
    # ============================================
    # 静的ファイル配信の設定
    # ============================================
    
    # 静的ファイルのキャッシュ設定
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # キャッシュ期間を1年に設定
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # ファイルが見つからない場合は404を返す
        try_files $uri =404;
    }
    
    # ============================================
    # バックエンドAPIへのプロキシ設定
    # ============================================
    
    # /api/v1 で始まるリクエストをバックエンド（Gin）にプロキシ
    location /api/v1/ {
        # プロキシ先のバックエンドサーバー
        # Docker Composeの場合、サービス名でアクセス可能
        proxy_pass http://backend:8080;
        
        # リクエストヘッダーの設定
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # プロキシタイムアウト設定
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # バッファリング設定
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # エラー時のフォールバック（バックエンドが利用できない場合）
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    }
    
    # ============================================
    # SPA（Single Page Application）のルーティング設定
    # ============================================
    
    # React Routerなどのクライアントサイドルーティング対応
    location / {
        # ファイルが存在すれば返し、なければindex.htmlを返す
        try_files $uri $uri/ /index.html;
        
        # SPAのため、HTML/JSファイルはキャッシュしない
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # ============================================
    # ヘルスチェック用エンドポイント
    # ============================================
    
    # Nginx自体のヘルスチェック
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # ============================================
    # セキュリティ設定
    # ============================================
    
    # .htaccessなどの隠しファイルへのアクセス拒否
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # favicon.icoが見つからない場合のログ抑制
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    
    # robots.txtが見つからない場合のログ抑制
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
}
