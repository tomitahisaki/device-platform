name: Deploy Backend (manual, GHCR)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to build (branch/tag/SHA)'
        default: 'main'
        required: true
      image_tag:
        description: 'Image tag to deploy (empty = current commit SHA)'
        default: ''
        required: false
      dry_run:
        description: 'dry run(no pull/up)'
        type: boolean
        default: false

env:
  IMAGE_NAME: ghcr.io/${{ secrets.GHCR_USERNAME }}/device-platform-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tag
        id: tag
        run: |
          t="${{ inputs.image_tag }}"
          [ -z "$t" ] && t="${GITHUB_SHA}"
          echo "value=$t" >> $GITHUB_OUTPUT

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.value }}
            ${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Start ssh-agent (load deploy key)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # ====== (deploy用) リポジトリをチェックアウト：SCPで配布するため ======
      - name: Checkout (for deploy)
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          sparse-checkout: |
            backend/compose.prod.yml
          sparse-checkout-cone-mode: false

      # ====== compose.prod.yml をVPSへ毎回配布 ======
      - name: Push compose to VPS
        if: ${{ !inputs.dry_run }}
        run: |
          set -euo pipefail
          scp -o StrictHostKeyChecking=accept-new backend/compose.prod.yml \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/compose.prod.yml.new
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            set -euo pipefail
            mkdir -p /opt/myapp/backend
            if [ -f /opt/myapp/backend/compose.prod.yml ]; then
              cp /opt/myapp/backend/compose.prod.yml /opt/myapp/backend/compose.prod.yml.bak.$(date +%Y%m%d%H%M%S)
            fi
            mv /tmp/compose.prod.yml.new /opt/myapp/backend/compose.prod.yml
          '

      #        # ===== Dry-run（計画表示のみ・サーバ状態は変更しない） =====
      - name: Plan (dry-run)
        if: ${{ inputs.dry_run }}
        env:
          TAG: ${{ inputs.image_tag || github.sha }}
        run: |
          set -Eeuo pipefail
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            set -Eeuo pipefail
            cd /opt/myapp/backend

            echo "[plan] services:"; docker compose -f compose.prod.yml config --services

            echo "[plan] image to use:"
            IMAGE_TAG='"$TAG"' docker compose -f compose.prod.yml config \
              | awk "/image:/ {print \"  \" \$2}" | sort -u

            echo "[plan] verify GHCR manifest"
            echo "***" | docker login ghcr.io -u "'"${{ secrets.GHCR_USERNAME }}"'" --password-stdin >/dev/null 2>&1 || true
            if docker manifest inspect "'"${{ env.IMAGE_NAME }}:$TAG"'" >/dev/null 2>&1; then
              echo "[ok] exists: $TAG"
            else
              echo "[error] not found: "'"${{ env.IMAGE_NAME }}:$TAG"'" ; exit 1
            fi

            echo "[plan] current app container:"
            docker compose -f compose.prod.yml ps app || true

            echo "[plan] would run:"
            echo "  IMAGE_TAG='"$TAG"' docker compose --env-file ./.env.prod -f compose.prod.yml run --rm migrator"
            echo "  IMAGE_TAG='"$TAG"' docker compose --env-file ./.env.prod -f compose.prod.yml pull app"
            echo "  IMAGE_TAG='"$TAG"' docker compose --env-file ./.env.prod -f compose.prod.yml up -d app"
          '

      # ===== 実デプロイ =====
      - name: Deploy on VPS (migrate, pull & up)
        if: ${{ !inputs.dry_run }}
        env:
          TAG: ${{ inputs.image_tag || github.sha }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            set -Eeuo pipefail
            cd /opt/myapp/backend

            # compose に migrator があるか
            if ! docker compose -f compose.prod.yml config --services | grep -qx migrator; then
              echo "[ERROR] migrator service not found in compose.prod.yml"; exit 1
            fi

            # GHCR login (pull用)
            echo "'"${{ secrets.GHCR_TOKEN }}"'" | docker login ghcr.io -u "'"${{ secrets.GHCR_USERNAME }}"'" --password-stdin

            # 1) マイグレーション（冪等）
            IMAGE_TAG='"$TAG"' docker compose --env-file ./.env.prod -f compose.prod.yml run --rm migrator

            # 2) イメージpull（appのみ）
            IMAGE_TAG='"$TAG"' docker compose --env-file ./.env.prod -f compose.prod.yml pull app

            # 3) 切替
            IMAGE_TAG='"$TAG"' docker compose --env-file ./.env.prod -f compose.prod.yml up -d app
          '
          '

      - name: Readiness check
        if: ${{ !inputs.dry_run }}
        run: |
          set -e
          for i in $(seq 1 30); do
            if ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
              "curl -fsS http://127.0.0.1:3000/api/v1/health | grep -qi '^ok$'"; then
              echo "ready"; exit 0
            fi
            sleep 2
          done
          echo "App not ready after deploy"
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd /opt/myapp/backend && docker compose -f compose.prod.yml logs --tail=120 app || true"
          exit 1

