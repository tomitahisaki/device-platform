name: Deploy Backend (manual, GHCR)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to build (branch/tag/SHA)'
        default: 'main'
        required: true
      image_tag:
        description: 'Image tag to deploy (empty = current commit SHA)'
        default: ''
        required: false
      dry_run:
        description: 'dry run(no pull/up)'
        type: boolean
        default: false

env:
  IMAGE_NAME: ghcr.io/${{ secrets.GHCR_USERNAME }}/device-platform-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tag
        id: tag
        run: |
          t="${{ inputs.image_tag }}"
          [ -z "$t" ] && t="${GITHUB_SHA}"
          echo "value=$t" >> $GITHUB_OUTPUT

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.value }}
            ${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Start ssh-agent (load deploy key)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # ===== Dry-run (計画表示のみ) =====
      - name: Plan (dry-run)
        if: ${{ inputs.dry_run }}
        env:
          TAG: ${{ inputs.image_tag || github.sha }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            set -euo pipefail
            cd /opt/myapp/backend

            echo "[plan] resolve image with IMAGE_TAG='"$TAG"'"
            IMAGE_TAG='"$TAG"' docker compose -f compose.prod.yml config | awk "/image:/ {print \"planned_image:\", \$2}"

            echo "[plan] check GHCR manifest exists"
            echo "'"${{ secrets.GHCR_TOKEN }}"'" | docker login ghcr.io -u "'"${{ secrets.GHCR_USERNAME }}"'" --password-stdin >/dev/null 2>&1 || true
            if docker manifest inspect "'"${{ env.IMAGE_NAME }}:$TAG"'" >/dev/null 2>&1; then
              echo "[ok] ghcr.io manifest found for tag: '"$TAG"'"
            else
              echo "[ERROR] image tag not found on GHCR: '"${{ env.IMAGE_NAME }}:$TAG"'" ; exit 1
            fi

            echo "[plan] current running app container & image (if any)"
            CID=$(docker compose -f compose.prod.yml ps -q app || true)
            if [ -n "$CID" ]; then
              CUR_IMAGE=$(docker inspect --format "{{ .Config.Image }}" "$CID")
              CUR_DIGEST=$(docker inspect --format "{{ index .RepoDigests 0 }}" "$CID" || true)
              echo "current_container: $CID"
              echo "current_image:     ${CUR_IMAGE}"
              echo "current_digest:    ${CUR_DIGEST}"
            else
              echo "current: (no running app container)"
            fi

            echo "[plan] would run:"
            echo "  IMAGE_TAG='"$TAG"' docker compose -f compose.prod.yml pull app"
            echo "  IMAGE_TAG='"$TAG"' docker compose -f compose.prod.yml up -d app"
          '

      # ===== 実デプロイ =====
      - name: Deploy on VPS (pull & up)
        if: ${{ !inputs.dry_run }}
        env:
          TAG: ${{ inputs.image_tag || github.sha }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            set -euo pipefail
            cd /opt/myapp/backend

            # Login GHCR for pull
            echo "'"${{ secrets.GHCR_TOKEN }}"'" | docker login ghcr.io -u "'"${{ secrets.GHCR_USERNAME }}"'" --password-stdin

            # DB migrate
            docker compose -f compose.prod.yml run --rm migrator

            # Pull & restart only app service with the given tag (IMAGE_TAG)
            IMAGE_TAG='"$TAG"' docker compose -f compose.prod.yml pull app
            IMAGE_TAG='"$TAG"' docker compose -f compose.prod.yml up -d app
          '

      - name: Readiness check
        run: |
          set -e
          for i in $(seq 1 30); do
            if ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
              "curl -fsS http://127.0.0.1:3000/api/v1/health | grep -qi '^ok$'"; then
              echo "ready"; exit 0
            fi
            sleep 2
          done
          echo "App not ready after deploy"
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd /opt/myapp/backend && docker compose -f compose.prod.yml logs --tail=120 app || true"
          exit 1


