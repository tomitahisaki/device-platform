# ===================================
# VPS本番環境用 Docker Compose設定
# フロントエンドはホストのNginxで配信、APIとDBのみDockerで管理
# ===================================
# 使用方法: docker-compose -f compose.vps.yml up -d

services:
  # ===================================
  # バックエンドサービス（Go + Gin）
  # ===================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: device_platform_api

    # 127.0.0.1:3000にバインド（外部非公開）
    ports:
      - "127.0.0.1:3000:8080"

    # 本番用環境変数
    environment:
      - ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=device_platform
      - DB_USER=${DB_USER:-device_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSLMODE=disable
      - API_PORT=8080

    # データベース起動を待機
    depends_on:
      db:
        condition: service_healthy

    networks:
      - api_network

    # 自動再起動設定
    restart: unless-stopped

    # メモリ制限（VPSリソース節約）
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

    # ヘルスチェック設定
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  # ===================================
  # データベースサービス（PostgreSQL）
  # ===================================
  db:
    image: postgres:15-alpine
    container_name: device_platform_db

    # 本番用データベース設定
    environment:
      POSTGRES_DB: device_platform
      POSTGRES_USER: ${DB_USER:-device_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # PostgreSQL設定の最適化（メモリ節約）
      POSTGRES_INITDB_ARGS: "--auth-host=md5"

    # 外部からの直接アクセス不可
    expose:
      - "5432"

    # データ永続化
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # マイグレーションファイル
      - ./backend/migrations:/docker-entrypoint-initdb.d
      # PostgreSQL設定ファイル（メモリ最適化）
      - ./deploy/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf

    networks:
      - api_network

    # 自動再起動設定
    restart: unless-stopped

    # メモリ制限（VPSリソース節約）
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

    # データベースのヘルスチェック
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-device_user} -d device_platform",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

# ===================================
# 永続化ボリューム設定
# ===================================
volumes:
  postgres_data:
    driver: local
    # 必要に応じてホストパスを指定
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /var/lib/docker/volumes/device_platform_postgres

# ===================================
# ネットワーク設定
# ===================================
networks:
  api_network:
    driver: bridge
    # 内部ネットワークのみ（セキュリティ強化）
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
