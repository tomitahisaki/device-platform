
name: device_platform
services:
  app:
    image: ghcr.io/tomitahisaki/device-platform-backend:${IMAGE_TAG:-stable}
    env_file: [ ./.env.prod ]
    environment:
      APP_ENV: production
      # アプリが DB_URL を見るなら注入（不要なら削除可）
      DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT:-5432}/${DB_NAME}?sslmode=disable
    ports: ["127.0.0.1:3000:3000"]
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:16
    env_file: [ ./.env.prod ]
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose: ["5432"]                       # 外部公開しない
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER:-postgres} -h 127.0.0.1 -p $${DB_PORT:-5432} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 20s
    restart: unless-stopped

  migrator:
    # app と同じイメージ（中に /app/migrations と migrate バイナリが入っている）
    image: ghcr.io/tomitahisaki/device-platform-backend:${IMAGE_TAG:-stable}
    depends_on:
      db:
        # ヘルス待ちまでは不要。起動順だけ担保して、実行側で失敗なら落ちる設計に。
        condition: service_started
    env_file: [ ./.env.prod ]
    # 実行コマンドをcommandにおくと、配列として読み取られ、エラーになるためentrypointに追記
    entrypoint:
      - /bin/sh
      - -ceu
      - |-
        DB_URL="postgres://$${DB_USER}:$${DB_PASSWORD}@db:$${DB_PORT:-5432}/$${DB_NAME}?sslmode=disable"
        echo "[migrator] which migrate: $(command -v migrate)"
        echo "[migrator] list /app/migrations:"; ls -1 /app/migrations
        exec migrate -verbose -path=/app/migrations -database "$$DB_URL" up

volumes:
  pgdata:

