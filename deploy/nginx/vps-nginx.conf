# ===================================
# VPS本番環境用 Nginx設定
# 配置先: /etc/nginx/sites-available/my-app
# ===================================

server {
    # HTTPポート80でリッスン
    listen 80;
    
    # さくらのVPS本番ドメイン名
    server_name ik1-339-29510.vs.sakura.ne.jp;
    
    # ドキュメントルート（ビルド済みReactアプリの配置場所）
    root /var/www/myapp/;
    
    # デフォルトインデックスファイル
    index index.html;
    
    # ============================================
    # 静的ファイル配信の最適化設定
    # ============================================
    
    # CSS/JSファイルの長期キャッシュ
    location ~* \.(js|css|map)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        gzip_static on;
        try_files $uri =404;
    }
    
    # 画像・フォントファイルの長期キャッシュ
    location ~* \.(png|jpg|jpeg|gif|ico|svg|webp|avif|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        try_files $uri =404;
    }
    
    # ============================================
    # バックエンドAPIへのプロキシ設定
    # ============================================
    
    # /api/v1 で始まるリクエストをローカルのGinサーバーにプロキシ
    location /api/v1/ {
        # ローカルの127.0.0.1:3000で動作するGinサーバーにプロキシ
        proxy_pass http://127.0.0.1:3000;
        
        # リクエストヘッダーの設定
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # プロキシタイムアウト設定（API応答時間に応じて調整）
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # バッファリング設定（メモリ効率化）
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # エラー時のフォールバック
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
    }
    
    # ============================================
    # SPA（Single Page Application）のルーティング設定
    # ============================================
    
    # React Routerなどのクライアントサイドルーティング対応
    location / {
        # ファイルが存在すれば返し、なければindex.htmlを返す
        try_files $uri $uri/ /index.html;
        
        # SPAのHTMLファイルはキャッシュしない（更新反映のため）
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }
    
    # ============================================
    # ヘルスチェック・監視用エンドポイント
    # ============================================
    
    # Nginx自体のヘルスチェック
    location /health {
        access_log off;
        return 200 "nginx-healthy\n";
        add_header Content-Type text/plain;
    }
    
    # APIサーバーのヘルスチェック（プロキシ経由）
    location /api/health {
        proxy_pass http://127.0.0.1:3000/health;
        access_log off;
    }
    
    # ============================================
    # セキュリティ・ログ設定
    # ============================================
    
    # 隠しファイルへのアクセス拒否
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # favicon.ico関連のログ抑制
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        try_files $uri =204;
    }
    
    # robots.txt設定
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
        try_files $uri =204;
    }
    
    # 不要なファイルタイプのブロック
    location ~* \.(env|log|bak|backup|old)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # ============================================
    # パフォーマンス最適化
    # ============================================
    
    # アクセスログ（必要に応じてオフ）
    access_log /var/log/nginx/device-platform-access.log;
    error_log /var/log/nginx/device-platform-error.log warn;
    
    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
}

# ============================================
# HTTPS設定（Let's Encrypt使用時）
# ============================================
# SSL証明書取得後にコメントアウト解除

# server {
#     listen 443 ssl http2;
#     server_name ik1-339-29510.vs.sakura.ne.jp;
#     
#     # SSL証明書設定
#     ssl_certificate /etc/letsencrypt/live/ik1-339-29510.vs.sakura.ne.jp/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/ik1-339-29510.vs.sakura.ne.jp/privkey.pem;
#     
#     # SSL設定
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # 上記のHTTP設定をここにも適用
#     # （rootディレクティブ以下をコピー）
# }

# HTTPからHTTPSへのリダイレクト（HTTPS設定時）
# server {
#     listen 80;
#     server_name ik1-339-29510.vs.sakura.ne.jp;
#     return 301 https://$server_name$request_uri;
# }
